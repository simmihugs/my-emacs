#+TITLE: typescript
#+begin_src emacs-lisp
  ;; (setq lsp-clients-typescript-tls-path "/usr/local/bin/typescript-language-server")

  ;; (lsp-register-client
  ;;  (make-lsp-client :new-connection (lsp-stdio-connection "typescript-language-server")
  ;; 		  :activation-fn (lsp-activate-on "typescript-mode")
  ;; 		  :server-id 'tsls))


  (lsp-register-client
   (make-lsp-client :new-connection (lsp-stdio-connection (lambda ()
							    `(,(lsp-package-path 'typescript-language-server)
							      "--tsserver-path"
							      ,(lsp-package-path 'typescript)
							      ,@lsp-clients-typescript-server-args)))
		    :activation-fn 'lsp-typescript-javascript-tsx-jsx-activate-p
		    :priority -2
		    :completion-in-comments? t
		    :initialization-options (lambda ()
					      (list :plugins lsp-clients-typescript-plugins
						    :logVerbosity lsp-clients-typescript-log-verbosity
						    :tsServerPath (lsp-package-path 'typescript)))
		    :ignore-messages '("readFile .*? requested by TypeScript but content not available")
		    :server-id 'ts-ls
		    :download-server-fn (lambda (_client callback error-callback _update?)
					  (lsp-package-ensure
					   'typescript
					   (-partial #'lsp-package-ensure
						     'typescript-language-server
						     callback
						     error-callback)
					   error-callback))))
  
  (use-package typescript-mode
    :hook ((typescript-mode) . (lambda () (lsp)))
    :config
    (with-eval-after-load "lsp-mode"
      (add-to-list 'lsp-enabled-clients 'ts-ls))
    (add-to-list 'auto-mode-alist '("\\.ts$" . typescript-mode))
    (add-to-list 'auto-mode-alist '("\\.tsx$" . typescript-mode))
    (add-to-list 'file-coding-system-alist '("\\.ts$" . utf-8))
    (add-to-list 'file-coding-system-alist '("\\.tsx$" . utf-8))
    (sp-local-pair 'typescript-mode "{" nil :post-handlers '(("||\n[i]" "RET"))))

#+end_src

#+RESULTS:
| lambda | nil | (lsp) |
