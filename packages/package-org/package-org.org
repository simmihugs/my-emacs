#+TITLE: org-mode
#+BEGIN_SRC emacs-lisp
  (use-package org
    :config
    (global-set-key (kbd "C-'") 'org-cycle-agenda-files)
    (setq org-adapt-indentation t)

    (defun tangle-init-async ()
      "If the current buffer is 'emacs-init.org' the code-blocks are tangled."
      (when (equal (buffer-file-name)
		   (expand-file-name (concat user-emacs-directory "init.org")))
	(async-start
	 `(lambda ()
	    (require 'org)
	    (org-babel-tangle-file
	     (expand-file-name (concat user-emacs-directory "init.org")) 

	     (expand-file-name (concat user-emacs-directory "init.el") "emacs-lisp")))
	 (lambda (result)
	   (byte-compile-file (expand-file-name
			       (concat user-emacs-directory "init.el")))
	   (message "Tangled file compiled.")))))

  ;;; org-tempo
    (require 'org-tempo)
    (setq org-startup-folded t)

	   ;;; org-mode headings level
    (set-face-attribute 'org-level-1 nil :foreground "#DB0077")
    (set-face-attribute 'org-level-2 nil :foreground "#02B0FA")
    (set-face-attribute 'org-level-3 nil :foreground "#E9FA02")
    (set-face-attribute 'org-level-4 nil :foreground "#14BF08")         
    (set-face-attribute 'org-level-5 nil :foreground "#C2000A")

    ;; (custom-set-faces
    ;;  '(org-block ((t (:Family "FantasqueSansMono"))))
    ;;  '(org-block-begin-line ((t (:foreground "dark green" :Family "FantasqueSansMono"))))
    ;;  '(org-date ((t (:foreground "#02B0FA" :Family "FantasqueSansMono"))))
    ;;  '(org-formula ((t (:foreground "orange" :Family "FantasqueSansMono"))))
    ;;  '(org-meta-line ((t (:foreground "dark green" :Family "FantasqueSansMono"))))
    ;;  '(org-table ((t (:foreground "#02B0FA" :Family "FantasqueSansMono"))))
    ;;  '(org-verbatim ((t (:foreground "grey" :Family "FantasqueSansMono" :extra-bold t))))
    ;;  '(org-code ((t (:foreground "grey" :Family "FantasqueSansMono" :extra-bold t)))))

    (require 'ox-latex)

    ;; (setq org-latex-pdf-process (list "latexmk -f -pdf %f"))

    (use-package ox-reveal)
    (use-package alert)
    (use-package org-wild-notifier)
    (use-package async)
    (use-package org-ref)
    (setq fill-column 80
	  auto-fill-mode t)

	   ;;; org-latex
    (add-to-list 'org-latex-packages-alist '("english" "babel"))
    (add-to-list 'org-latex-packages-alist '("" "listings"))
    (add-to-list 'org-latex-packages-alist '("" "color"))
    (setq org-latex-toc-command "\\tableofcontents"
	  org-src-fontify-natively t
	  org-export-default-language 'de
	  org-latex-listings 'listings)

    ;; Remove TODO and DONE in latex export
    (defun org-latex-format-headline-colored-keywords-function
	(todo todo-type priority text tags info)
      (concat
       (cond ((string= todo "TODO")(and todo ""))
	     ((string= todo "DONE")(and todo "")))
       (and priority (format "\\framebox{\\#%c} " priority))
       text
       (and tags
	    (format "\\hfill{}\\textsc{%s}"
		    (mapconcat (lambda (tag) (org-latex-plain-text tag info))
			       tags ":")))))

    (setq org-latex-format-headline-function 'org-latex-format-headline-colored-keywords-function)

	   ;;; org-html
    (setq org-export-html-postamble nil)

	   ;;; org-inlineimages
    (setq org-image-actual-width '(300)
	  org-display-inline-images t
	  org-redisplay-inline-images t
	  org-startup-with-inline-images t
	  org-startup-with-inline-images "inlineimages")

	   ;;; org-reveal
    (add-to-list 'load-path (concat user-emacs-directory "/org-reveal"))
    (setq org-reveal-root "file:///home/simmi/.reveal.js"
	  Org-Reveal-title-slide nil
	  org-reveal-mathjax t)

	   ;;; org-file-apps
    (setq org-file-apps
	  (quote
	   ((auto-mode . emacs)
	    ("\\.mm\\'" . default)
	    ("\\.x?html?\\'" . "/usr/bin/firefox %s")
	    ("\\.pdf\\'" . default))))

	   ;;; org-wild-notifier
    (org-wild-notifier-mode)
    (setq alert-default-style 'libnotify
	  org-wild-notifier-notification-title "ToDo"
	  org-wild-notifier-alert-time "2")



    (use-package org-drill
      :config
      (setq org-drill-use-visible-cloze-face-p t))
	   ;;; org-agenda
    (setq org-agenda-files '("~/.emacs.d/init.org"
			     "~/.emacs.d/notes.org"))

	   ;;; org-babel
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (shell . t)
       (haskell . t)
       (python . t)))

    (setq org-confirm-babel-evaluate nil)

	   ;;; org-async
    (add-to-list 'load-path (concat user-emacs-directory "/emacs-async/"))
    (add-hook 'after-save-hook 'tangle-init-async)


    ;;; org-summary-todo
    (defun org-summary-todo (n-done n-not-done)
      "Switch entry to DONE when all subentries are done, to TODO otherwise."
      (let (org-log-done org-log-states)
	(org-todo (if (= n-not-done 0) "DONE" "TODO"))))
    (add-hook 'org-after-todo-statistics-hook 'org-summary-todo)

    (defun addCheckBoxToTODO()
      (interactive)
      (progn
	(org-insert-todo-heading nil)
	(insert " [/]")
	(backward-char 4)))
    (define-key org-mode-map [M-S-return] 'addCheckBoxToTODO)

    (set-face-underline 'org-ellipsis nil)
    (add-hook 'org-mode-hook 'turn-on-auto-fill)
    (add-hook 'org-mode-hook #'smartparens-mode)
    ;;(org-add-link-type "rtcite" nil 'my-rtcite-export-handler)
    (org-link-set-parameters "rtcite" nil 'my-rtcite-export-handler)

    ;;;Update org-table
    (add-to-list 'load-path (expand-file-name "my-elisp-code" user-emacs-directory))
    (require 'my-org-table)
    (require 'my-reformate-org-table)

    ;;; End use-package org-mode
    )
#+end_src
