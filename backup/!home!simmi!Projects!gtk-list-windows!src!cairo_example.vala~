namespace GtkListWindows {

	public class CairoSample : Gtk.Window {

		private const int SIZE = 30;

		public CairoSample () {
			this.title = "Cairo Vala Demo";
			this.destroy.connect (Gtk.main_quit);
			set_default_size (450, 550);
			create_widgets ();
		}

		private void create_widgets () {
			Gtk.DrawingArea drawing_area = new Gtk.DrawingArea ();
			drawing_area.draw.connect (on_draw);

			Gtk.Box box = new Gtk.Box (Gtk.Orientation.VERTICAL, 2);
			this.add (drawing_area);
		}

		private bool on_draw (Gtk.Widget da, Cairo.Context ctx) {
			ctx.set_source_rgb (0, 0, 0);

			ctx.set_line_width (SIZE / 4);
			ctx.set_tolerance (0.1);

			ctx.set_line_join (Cairo.LineJoin.ROUND);
			ctx.set_dash (new double[] {SIZE / 4.0, SIZE / 4.0}, 0);
			stroke_shapes (ctx, 0, 0);

			ctx.set_dash (null, 0);
			stroke_shapes (ctx, 0, 3 * SIZE);

			ctx.set_line_join (Cairo.LineJoin.BEVEL);
			stroke_shapes (ctx, 0, 6 * SIZE);

			ctx.set_line_join (Cairo.LineJoin.MITER);
			stroke_shapes(ctx, 0, 9 * SIZE);

			fill_shapes (ctx, 0, 12 * SIZE);

			ctx.set_line_join (Cairo.LineJoin.BEVEL);
			fill_shapes (ctx, 0, 15 * SIZE);
			ctx.set_source_rgb (1, 0, 0);
			stroke_shapes (ctx, 0, 15 * SIZE);

			return true;
		}

		private void stroke_shapes (Cairo.Context ctx, int x, int y) {
			this.draw_shapes (ctx, x, y, ctx.stroke);
		}

		private void fill_shapes (Cairo.Context ctx, int x, int y) {
			this.draw_shapes (ctx, x, y, ctx.fill);
		}

		private delegate void DrawMethod ();

		private void draw_shapes (Cairo.Context ctx, int x, int y, DrawMethod draw_method) {
			ctx.save ();

			ctx.new_path ();
			ctx.translate (x + SIZE, y + SIZE);
			bowtie (ctx);
			draw_method ();

			ctx.new_path ();
			ctx.translate (3 * SIZE, 0);
			square (ctx);
			draw_method ();

			ctx.new_path ();
			ctx.translate (3 * SIZE, 0);
			triangle (ctx);
			draw_method ();

			ctx.new_path ();
			ctx.translate (3 * SIZE, 0);
			inf (ctx);
			draw_method ();

			ctx.restore();
		}

		private void triangle (Cairo.Context ctx) {
			ctx.move_to (SIZE, 0);
			ctx.rel_line_to (SIZE, 2 * SIZE);
			ctx.rel_line_to (-2 * SIZE, 0);
			ctx.close_path ();
		}

		private void square (Cairo.Context ctx) {
			ctx.move_to (0, 0);
			ctx.rel_line_to (2 * SIZE, 0);
			ctx.rel_line_to (0, 2 * SIZE);
			ctx.rel_line_to (-2 * SIZE, 0);
			ctx.close_path ();
		}

		private void bowtie (Cairo.Context ctx) {
			ctx.move_to (0, 0);
			ctx.rel_line_to (2 * SIZE, 2 * SIZE);
			ctx.rel_line_to (-2 * SIZE, 0);
			ctx.rel_line_to (2 * SIZE, -2 * SIZE);
			ctx.close_path ();
		}

		private void inf (Cairo.Context ctx) {
			ctx.move_to (0, SIZE);
			ctx.rel_curve_to (0, SIZE, SIZE, SIZE, 2 * SIZE, 0);
			ctx.rel_curve_to (SIZE, -SIZE, 2 * SIZE, -SIZE, 2 * SIZE, 0);
			ctx.rel_curve_to (0, SIZE, -SIZE, SIZE, -2 * SIZE, 0);
			ctx.rel_curve_to (-SIZE, -SIZE, -2 * SIZE, -SIZE, -2 * SIZE, 0);
			ctx.close_path ();
		}
	}

}