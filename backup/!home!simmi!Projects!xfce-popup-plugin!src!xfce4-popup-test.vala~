/* @TODO
 * 1. Settings for listen to monitor association
 * 2. Settings for listen to workspace association
 * 3. Settings for Icon size
 * 4. Click entire workspacebox to jump
 * 5. Hover for context menu
 * 6. Middle click and right click behavior
 * 7. Deal with windows without icon
 */


namespace Tint2Tasklist {

    private class Plugin : Xfce.PanelPlugin {
        internal Monitor monitor { get; set; }
        internal Wnck.Screen wnck_screen { get; set; }
		internal Gtk.Box box { get; set; }
		
        public override void @construct() {
            Intl.bindtextdomain(GETTEXT_PACKAGE, LOCALEDIR);
            Intl.textdomain(GETTEXT_PACKAGE);
            Intl.bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");

			Gdk.Screen gdk_screen = Gdk.Screen.get_default ();
			Gdk.Display gdk_display = gdk_screen.get_display();
			Gdk.Window gdk_window = this.get_window ();
			Gdk.Monitor gdk_monitor = gdk_display.get_monitor_at_window (gdk_window);
			this.monitor = new Monitor (gdk_monitor);

			this.box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
			this.wnck_screen = Wnck.Screen.get_default ();
			this.wnck_screen.force_update ();			
			unowned List<Wnck.Workspace> wnck_workspaces = wnck_screen.get_workspaces ();
			
			foreach (Wnck.Workspace wnck_workspace in wnck_workspaces) {
				var workspace_box = new WorkspaceBox (this, wnck_workspace);
				box.add (workspace_box);
			}
			this.wnck_screen.workspace_created.connect (add_workspace_box);
			this.wnck_screen.workspace_destroyed.connect (remove_workspace_box);

			box.set_homogeneous (true);
            add(box);
            add_action_widget(box);
            box.show_all ();
			this.set_expand(true);
			
            menu_show_configure();
            configure_plugin.connect(() => {
                var dialog = new SettingsDialog(this);
                dialog.show_all();
            });
        }

		private void add_workspace_box (Wnck.Workspace wnck_workspace) {
			var workspace_box = new WorkspaceBox (this, wnck_workspace);
			this.box.add (workspace_box);
			this.box.show_all ();
		}

		private void remove_workspace_box (Wnck.Workspace wnck_workspace) {
			var workspace_boxes = this.box.get_children ();
			foreach (var b in workspace_boxes) {
				WorkspaceBox workspace_box = (WorkspaceBox) b;
				if (workspace_box.wnck_workspace == wnck_workspace) {
					this.box.remove (b);
				}
			}
		}
    }
}

[ModuleInit]
public Type xfce_panel_module_init(TypeModule module) {
    return typeof (Tint2Tasklist.Plugin);
}
