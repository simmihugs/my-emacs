namespace AlsaPlugin {

	private String css_path = "/home/simmi/Projects/xfce4-alsa-plugin/style.css";

	private void style_button (Gtk.Button button, bool active) {
		Gtk.CssProvider css_provider = new Gtk.CssProvider ();
		try {
			css_provider.load_from_path (css_path);
			Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default (),
													 css_provider,
													 Gtk.STYLE_PROVIDER_PRIORITY_USER);
			if (active) {
				button.get_style_context().add_class ("my_button_active");
			} else {
				button.get_style_context().add_class ("my_button";)
			}
		} catch (GLib.Error e) {
			stdout.printf("could not load css file");
		}		
	}
	
	public class WindowButton : Gtk.Button {
		public Wnck.Window wnck_window;
		publie Wnck.Screen screen;

		public WindowButton (Wnck.Window wnck_window) {
			this.wnck_window = wnck_window;

			var wnck_window_name = wnck_window.get_class_group_name ();

			Gdk.Pixbuf wnck_window_icon = wnck_window.get_icon ();
			try {
				if ("Alacritty" == wnck_window_name) {
					wnck_window_icon =
						new Gdk.Pixbuf.from_file("/home/simmi/Projects/xfce4-alsa-plugin/Alacritty.png");
				}
			} catch (GLib.Error e) {
				stdout.printf("Alacritty icon not found");
			}
		
			var window_icon_scaled = wnck_window_icon.scale_simple (24, 24, HYPER);
			var image = new Gtk.Image.from_pixbuf (window_icon_scaled);
			
			this.set_image(image);
			this.set_image_position(BOTTOM);

			style_button (this, wnck_window.is_active ());

			this.button_press_event.connect (on_button_press);

			this.screen = Wnck.Screen.get_default ();
			screen.active_window_changed.connect (update_style);
		}

		private void update_style (Wnck.Window previous_active_window) {
			style_button (this, wnck_window.is_active ());
		}

		private bool on_button_press (Gdk.EventButton event) {
			if (event.type == Gdk.EventType.BUTTON_PRESS) {
				var wnck_workspace = wnck_window.get_workspace ();
				wnck_workspace.activate(event.get_time());
				wnck_window.activate(event.get_time());
			}
			return false;
		}
	}

	public class WorkspaceButton : Gtk.Button {
		public Wnck.Screen screen;
		public Wnck.Workspace wnck_workspace;

		public WorkspaceButton (Wnck.Workspace wnck_workspace) {
			this.wnck_workspace = wnck_workspace;
			this.set_label((1 + wnck_workspace.get_number()).to_string());

			style_button (this, this.is_active_workspace ());

			this.button_press_event.connect (on_button_press);

			
			this.screen = Wnck.Screen.get_default ();
			screen.force_update ();			
			screen.active_workspace_changed.connect (change_style);
		}

		private bool is_active_workspace () {
			if (this.wnck_workspace == this.screen.get_active_workspace ())
				return true;
			return false;
		}

		private void change_style (Wnck.Workspace previous_workspace) {
			style_button (this, this.is_active_workspace ());
		}		

		private bool on_button_press (Gdk.EventButton event) {
			if (event.type == Gdk.EventType.BUTTON_PRESS) {
				wnck_workspace.activate(event.get_time());
			}
			return false;
		}
	}


	public class WorkspaceContainer : Gtk.Box {
		Wnck.Workspace wnck_workspace;
		Gdk.Monitor gdk_monitor;

		public WorkspaceContainer (Wnck.Workspace wnck_workspace, Gdk.Monitor gdk_monitor) {
			this.wnck_workspace = wnck_workspace;
			this.gdk_monitor = gdk_monitor;
			Wnck.Screen screen = Wnck.Screen.get_default ();
			screen.force_update ();
			var wnck_windows = screen.get_windows().copy ();
			foreach (var wnck_window in wnck_windows) {
				var wnck_window_workspace = wnck_window.get_workspace ();
				if (wnck_window_workspace != null &&
					wnck_window_workspace == wnck_workspace &&
					is_on_monitor (wnck_window)) {
					this.add (new WindowButton (wnck_window));
				}
			}
			screen.window_closed.connect(window_closed);
			screen.window_opened.connect(window_opened);	
		}

		private bool is_on_monitor (Wnck.Window wnck_window) {
			Gdk.Rectangle monitor_rectangle = this.gdk_monitor.get_geometry ();
			int x, y, h, w;
			wnck_window.get_geometry (out x, out y, out w, out h);
			var window_rectangle = Gdk.Rectangle() { x=x, y=y, width=w, height=h };
			var out_rectangle = Gdk.Rectangle();
			if (monitor_rectangle.intersect(window_rectangle, out out_rectangle)) {
				return true;
			}
			return false;
		}

		private void window_closed (Wnck.Window wnck_window) {
			var children = this.get_children();
			foreach (var child in children) {
				var button = (WindowButton)child;
				if (button.wnck_window == wnck_window) {
					this.remove (child);		
				}
			}		
		}

		private void window_opened (Wnck.Window wnck_window) {
			var wnck_window_workspace = wnck_window.get_workspace ();
			if (wnck_window_workspace != null &&
				wnck_workspace == wnck_window_workspace &&
				is_on_monitor (wnck_window)) {
				var button = new WindowButton (wnck_window);
				this.add (button);
				this.show_all ();
			}
		}
	}

	
    private class Plugin : Xfce.PanelPlugin {
        internal double volume_step { get; set; }

        public override void @construct() {
            Intl.bindtextdomain(GETTEXT_PACKAGE, LOCALEDIR);
            Intl.textdomain(GETTEXT_PACKAGE);
            Intl.bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");

			var horizontal_container = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 10);
	
			Gdk.Screen gdk_screen = Gdk.Screen.get_default ();
			Gdk.Display gdk_display = gdk_screen.get_display();

			Gdk.Window gdk_window = this.get_window ();
			var gdk_monitor = gdk_display.get_monitor_at_window (gdk_window);

			Wnck.Screen screen = Wnck.Screen.get_default ();	
			screen.force_update ();	
			var wnck_workspaces = screen.get_workspaces().copy ();
			foreach (var wnck_workspace in wnck_workspaces) {	
				var container = new WorkspaceContainer (wnck_workspace, gdk_monitor);
				var workspace_container = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 10);
				workspace_container.add (new WorkspaceButton (wnck_workspace));
				workspace_container.add (container);
				horizontal_container.add (workspace_container);
			}
			horizontal_container.set_homogeneous (true);
			
			this.add (horizontal_container);
			this.show_all();
			this.set_expand(true);

            menu_show_configure();
            configure_plugin.connect(() => {
					var dialog = new SettingsDialog(this);
					dialog.show_all();
				});
        }
    }
}

[ModuleInit]
public Type xfce_panel_module_init(TypeModule module) {
    return typeof (AlsaPlugin.Plugin);
}
