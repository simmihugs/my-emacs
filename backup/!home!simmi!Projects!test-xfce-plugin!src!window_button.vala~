namespace Tint2Tasklist {

	private class WindowButton : Gtk.Button {
		private Plugin plugin;
		internal Wnck.Window wnck_window { get; set; }
		internal Wnck.Workspace wnck_workspace { get; set; }
		// private Gtk.Popover menu_popover;

        private Popup popup;
		
		public WindowButton (Plugin plugin, Wnck.Window wnck_window, Wnck.Workspace wnck_workspace) {
			this.plugin = plugin;
			this.wnck_window = wnck_window;
			this.wnck_workspace = wnck_workspace; 

			//relief = Gtk.ReliefStyle.NONE;
            //add_events (Gdk.EventMask.SCROLL_MASK);

            this.button_press_event.connect (on_button_press_event);
			this.set_icon ();
			this.update ();

			//this.button_press_event.connect (on_button_press_event);
			plugin.wnck_screen.active_window_changed.connect (() => {
					this.set_icon ();
					this.update ();
					//this.button_press_event.connect (on_button_press_event);
				});

			this.wnck_window.workspace_changed.connect (() => {
					//Remove windowbutton
					Gtk.Box box = this.plugin.box;
					var workspace_boxes = box.get_children ();
					foreach (var w in workspace_boxes) {
						WorkspaceBox workspace_box = (WorkspaceBox)w;
						Gtk.Box window_box = workspace_box.window_box;
						var window_buttons = window_box.get_children ();
						foreach (var b in window_buttons) {
							WindowButton window_button = (WindowButton)b;
							Wnck.Window wnck_window_ = window_button.wnck_window;
							if (wnck_window_ == this.wnck_window) {
								window_box.remove (b);
							}
						}
					}
					//Add windowbutton to new workspace
					Wnck.Workspace new_workspace = this.wnck_window.get_workspace ();
					foreach (var w in workspace_boxes) {
						WorkspaceBox workspace_box = (WorkspaceBox)w;
						Wnck.Workspace tmp_workspace = workspace_box.wnck_workspace;
						if (new_workspace == tmp_workspace) {
							Gtk.Box window_box = workspace_box.window_box;
							window_box.add (new WindowButton (this.plugin, this.wnck_window, new_workspace));
							window_box.show_all ();
						}
					}
				});


			// var menu = new GLib.Menu ();
			// var item1 = new GLib.MenuItem ("item 1", null);
			// var item2 = new GLib.MenuItem ("item 2", null);
			// menu.append_item (item1);
			// menu.append_item (item2);
        	
			// this.menu_popover = new Gtk.Popover(this);
			// this.menu_popover.position = Gtk.PositionType.BOTTOM;
			// this.menu_popover.set_size_request (128, 0);
			// this.menu_popover.modal = false;
			// this.menu_popover.bind_model (menu, null);

			// this.enter_notify_event.connect ((event) => {
			// 		this.menu_popover.set_visible (true);					
			// 		return false;
			// 	});

			// menu_bar = new Gtk.MenuBar ();

			// Gtk.MenuItem item_file = new Gtk.MenuItem.with_label ("File");
			// menu_bar.add (item_file);

			// Gtk.Menu file_menu = new Gtk.Menu ();
			// item_file.set_submenu (file_menu);
			
			// item_open = new Gtk.MenuItem.with_label ("Open");
			// file_menu.add (item_open);

			// item_save = new Gtk.MenuItem.with_label ("Save");
			// file_menu.add (item_save);

			// item_quit = new Gtk.MenuItem.with_label ("Quit");
			// file_menu.add (item_quit);
			
			//Hover over 
			//this.enter_notify_event.connect ((EventCrossing event) => { this.close_popup.show_all(); return true; });

			//Hover out
			//this.leave_notify_event.connect ((EventCrossing event) => { this.show_popup = false; return true; });

			this.popup = new Popup(plugin, this.wnck_window);
            this.popup.show.connect(() => {
					position_popup ();
				});
            popup.hide.connect(() => {
					//this.active = false;
				});

			
			// this.enter_notify_event.connect ((event) => {
			// 		popup.show_all ();
			// 		this.activate ();
			// 		return false;
			// 	});
		}

		private void position_popup() {
            if (popup.visible) {
                int x = 0;
                int y = 0;
                plugin.position_widget(popup, this, out x, out y);
                popup.move(x, y);
            }
        }

		Gdk.Pixbuf try_finding_icon (Wnck.Window wnck_window, Gdk.Pixbuf wnck_window_pixbuf) {
			string wnck_window_class_group_name = wnck_window.get_class_group_name ();
			switch (wnck_window_class_group_name) {
			case "Alacritty":
				try {
					string path = "/home/simmi/Projects/xfce4-alsa-plugin/Alacritty.png";
					return new Gdk.Pixbuf.from_file(path);
				} catch (GLib.Error ge) {
					stdout.printf ("An error occured: %s", ge.message);
				}
				break;

			case "Microsoft Teams - Preview":
				try {
					string path = "/var/lib/flatpak/app/com.microsoft.Teams/x86_64/stable/ad0aeb3d2e3068961d351e313b6546ad5844a4d36fa0895821fcc05ab59c7d02/export/share/icons/hicolor/128x128/apps/com.microsoft.Teams.png";
					return new Gdk.Pixbuf.from_file(path);
				} catch (GLib.Error ge) {
					stdout.printf ("An error occured: %s", ge.message);
				}
				break;
			default:
				try {
					string path = "/usr/share/icons/Adwaita/24x24/mimetypes/application-x-firmware.png";
					return new Gdk.Pixbuf.from_file(path);
				} catch (GLib.Error ge) {
					stdout.printf ("An error occured: %s", ge.message);
				}
				break;
			}
			return wnck_window_pixbuf;
		}

		class MyDrawingArea : Gtk.DrawingArea {

			private Wnck.Window wnck_window;
		
			public MyDrawingArea (Wnck.Window wnck_window) {
				this.wnck_window = wnck_window;
				this.draw.connect(on_draw);
				this.set_size_request (24, 24);
				//this.button_press_event.connect (on_button_press_event);
			}
			
			// private bool on_button_press_event (Gdk.EventButton event) {
			// 	if (event.type == Gdk.EventType.BUTTON_PRESS) {
			// 		var wnck_workspace = wnck_window.get_workspace ();
			// 		wnck_workspace.activate (event.get_time());
			// 		wnck_window.activate (event.get_time());
			// 	}
			// 	return false;
			// }


			private bool on_draw (Gtk.Widget da, Cairo.Context ctx) {
				if (this.wnck_window.is_active ()) {
					ctx.set_source_rgb (0.09, 0.46, 0.82);
				} else {
					ctx.set_source_rgb (0.74, 0.74, 0.74);
				}

				ctx.rectangle (0, 22, 22, 1);
				//ctx.close_path ();
				ctx.stroke ();
				//ctx.fill ();

				Gdk.Pixbuf pixbuf = wnck_window.get_icon ();
				Gdk.Pixbuf scale_pixbuf;
				if (wnck_window.get_icon_is_fallback()) {
					pixbuf = try_finding_icon (wnck_window, pixbuf);
				}
				int size = 22;

				scale_pixbuf = pixbuf.scale_simple (size, size, HYPER);

				Gdk.cairo_set_source_pixbuf (ctx, scale_pixbuf, 0, 0);
				ctx.paint ();

				ctx.fill ();

				return true;
			}

			Gdk.Pixbuf try_finding_icon (Wnck.Window wnck_window, Gdk.Pixbuf wnck_window_pixbuf) {
				string wnck_window_class_group_name = wnck_window.get_class_group_name ();
				switch (wnck_window_class_group_name) {
				case "Alacritty":
					try {
						string path = "/home/simmi/Projects/xfce4-alsa-plugin/Alacritty.png";
						return new Gdk.Pixbuf.from_file(path);
					} catch (GLib.Error ge) {
						stdout.printf ("An error occured: %s", ge.message);
					}
					break;
				case "Microsoft Teams - Preview":
					try {
						string path = "/var/lib/flatpak/app/com.microsoft.Teams/x86_64/stable/ad0aeb3d2e3068961d351e313b6546ad5844a4d36fa0895821fcc05ab59c7d02/export/share/icons/hicolor/128x128/apps/com.microsoft.Teams.png";
						return new Gdk.Pixbuf.from_file(path);
					} catch (GLib.Error ge) {
						stdout.printf ("An error occured: %s", ge.message);
					}
					break;
				default:
					try {
						string path = "/usr/share/icons/Adwaita/24x24/mimetypes/application-x-firmware.png";
						return new Gdk.Pixbuf.from_file(path);
					} catch (GLib.Error ge) {
						stdout.printf ("An error occured: %s", ge.message);
					}
					break;
				}
				return wnck_window_pixbuf;
			}
		}

		private void set_icon () {
			var drawing_area = new MyDrawingArea (this.wnck_window);
			//Gtk.Image image = (Gtk.Image)drawing_area;
			//this.set_image (image);

			Cairo.ImageSurface surface = new Cairo.ImageSurface (Cairo.Format.ARGB32, 24, 24);
			
			Cairo.Context context = new Cairo.Context (surface);
			if (this.wnck_window.is_active ()) {
				context.set_source_rgb (0.09, 0.46, 0.82);
			} else {
				context.set_source_rgb (0.74, 0.74, 0.74);
			}
			context.rectangle (0, 22, 24, 2);
			context.fill ();

			Gdk.Pixbuf pixbuf = wnck_window.get_icon ();
			Gdk.Pixbuf scale_pixbuf;
			if (wnck_window.get_icon_is_fallback()) {
				pixbuf = try_finding_icon (wnck_window, pixbuf);
			}
			int size = 24;
			scale_pixbuf = pixbuf.scale_simple (size, size, HYPER);

			Gdk.cairo_set_source_pixbuf (context, scale_pixbuf, 0, 0);
			context.paint ();

			Gtk.Image image = new Gtk.Image.from_surface (surface);
			this.set_image (image);
			
			//this.set_image_position (BOTTOM);
		}
		
		private void set_icon2 () {
			Gdk.Pixbuf wnck_window_icon = wnck_window.get_icon ();
			if (wnck_window.get_icon_is_fallback()) {
				wnck_window_icon = try_finding_icon (wnck_window, wnck_window_icon);
			}
				
			int size = 24;
			
			Gdk.Pixbuf window_icon_scaled = wnck_window_icon.scale_simple (size, size, HYPER);
			Gtk.Image image = new Gtk.Image.from_pixbuf (window_icon_scaled);
			
			this.set_image (image);
			this.set_image_position (BOTTOM);
		}

		private bool on_button_press_event (Gdk.EventButton event) {
			if (event.type == Gdk.EventType.BUTTON_PRESS) {
				switch (event.button) {
				case 1:
					{
						wnck_workspace.activate (event.get_time());
						wnck_window.activate (event.get_time());
						return true;
					}
				case 3:
					{
						popup.show_all ();
						return true;
					}
				}
			}
			return false;
		}

		private void update () {
			var cssProvider = new Gtk.CssProvider();

			if (this.wnck_window.is_active ()) {
				try {
					cssProvider.load_from_data("""
											   .xfce4-panel button {
												   border:1px;
												   border-radius:1px;
												   background:none;
												   padding: 0px;
												   background-color: #557587;
											   }

											   .xfce4-panel button:hover {
												   background-color: #869db0;
											   }
											   """);
					get_style_context().add_provider(cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER);
				} catch (Error error) {
					stderr.printf("%s\n", error.message);
				}
			} else { 
				try {
					cssProvider.load_from_data("""
											   .xfce4-panel button {
												   border:1px;
												   border-radius:1px;
												   background:none;
												   padding: 0px;
												   background-color: #575c5e;
											   }
											   
											   .xfce4-panel button:hover {
												   background-color: #81888c; 
											   }
											   """);
					get_style_context().add_provider(cssProvider, Gtk.STYLE_PROVIDER_PRIORITY_USER);
				} catch (Error error) {
					stderr.printf("%s\n", error.message);
				}
			}
		}
	}
}