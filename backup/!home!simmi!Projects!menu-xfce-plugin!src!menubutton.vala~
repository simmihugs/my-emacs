namespace Tint2Tasklist {

	private class MenuButton : Gtk.Button {
		private Plugin plugin;
		internal Wnck.Window wnck_window { get; set; }
		internal Wnck.Workspace wnck_workspace { get; set; }

        private PopupE popup;
		
		public MenuButton (Plugin plugin, Wnck.Window wnck_window, Wnck.Workspace wnck_workspace) {
			this.plugin = plugin;
			this.wnck_window = wnck_window;
			this.wnck_workspace = wnck_workspace; 

            this.button_press_event.connect ((event) => {
					if (this.popup.is_visible ()) {
						this.popup.hide ();
					} else {
						this.popup.show_all ();						
					}

					return true;					
				});
			this.set_icon ();

			this.popup = new PopupE(plugin, this.wnck_window);
            this.popup.show.connect(() => {
					position_popup ();
				});
		}

		private void position_popup() {
            if (popup.visible) {
                int x = 0;
                int y = 0;
                plugin.position_widget(popup, this, out x, out y);
                popup.move(x, y);
            }
        }

		Gdk.Pixbuf try_finding_icon (Wnck.Window wnck_window, Gdk.Pixbuf wnck_window_pixbuf) {
			string path = "/usr/share/icons/hicolor/24x24/apps/org.xfce.panel.whiskermenu.png";
				try {
					return new Gdk.Pixbuf.from_file(path);
				} catch (GLib.Error ge) {
					stdout.printf ("An error occured: %s", ge.message);
				}
			return wnck_window_pixbuf;
		}			

		private void set_icon () {
			Gdk.Pixbuf wnck_window_icon = wnck_window.get_icon ();
			wnck_window_icon = try_finding_icon (wnck_window, wnck_window_icon);
				
			int size = 18;
			
			Gdk.Pixbuf window_icon_scaled = wnck_window_icon.scale_simple (size, size, HYPER);
			Gtk.Image image = new Gtk.Image.from_pixbuf (window_icon_scaled);
			
			this.set_image (image);
			this.set_image_position (BOTTOM);
		}

		private bool on_button_press_event (Gdk.EventButton event) {
			if (event.type == Gdk.EventType.BUTTON_PRESS) {
				wnck_workspace.activate (event.get_time());
				wnck_window.activate (event.get_time());

			}
			return false;
		}
	}
}