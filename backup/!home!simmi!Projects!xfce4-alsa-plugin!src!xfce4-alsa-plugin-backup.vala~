/*
 * xfce4-alsa-plugin
 * Copyright (C) 2015-2016 Alexey Rochev <equeim@gmail.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

namespace AlsaPlugin {
    private AlsaManager alsa;

	private class WorkspaceButton : Gtk.Button {
		Wnck.Workspace workspace;
		
		public WorkspaceButton(Wnck.Workspace workspace) {
			this.workspace = workspace;
			var number = workspace.get_number();
			this.set_label((1 + number).to_string());
			this.button_press_event.connect(on_button_press_event);
		}

	    private bool on_button_press_event(Gdk.EventButton event) {
            if (event.type == Gdk.EventType.BUTTON_PRESS) {
				this.workspace.activate(event.get_time());
            }
            return false;
        }
	}

	private class WindowButton : Gtk.Button {
		Wnck.Window window;
		Wnck.Workspace workspace;

		public WindowButton(Wnck.Window window, Wnck.Workspace workspace) {
			this.window = window;
			var window_icon = window.get_icon();
			var window_icon_scaled = window_icon.scale_simple(20, 20, HYPER);
			var image = new Gtk.Image.from_pixbuf(window_icon_scaled);
			this.set_image(image);
			this.set_image_position(BOTTOM);
			//this.set_has_frame(false);
			this.button_press_event.connect(on_button_press_event_window);			
		}
		
	    private bool on_button_press_event_window(Gdk.EventButton event) {
            if (event.type == Gdk.EventType.BUTTON_PRESS) {
				this.window.activate(event.get_time());
				this.workspace.activate(event.get_time());
            }
            return false;
        }
	}

	private class WindowsOnWorkspace : Gtk.Box {
		Wnck.Workspace workspace;

		public WindowsOnWorkspace(Wnck.Workspace workspace, Wnck.Screen screen) {
			this.workspace = workspace;
			screen.force_update();

			var windows = screen.get_windows().copy();
			foreach (var window in windows) {
				var window_workspace = window.get_workspace();
				if (window_workspace == this.workspace) {
					var window_button = new WindowButton(window, window_workspace);
					//window_button.button_press_event.connect(window_button.on_button_press_event_window);
					this.add(window_button);
				}
			}
		}
	}	
	
	
    private class Plugin : Xfce.PanelPlugin {
        internal double volume_step { get; set; }

        public override void @construct() {
            Intl.bindtextdomain(GETTEXT_PACKAGE, LOCALEDIR);
            Intl.textdomain(GETTEXT_PACKAGE);
            Intl.bind_textdomain_codeset(GETTEXT_PACKAGE, "UTF-8");

            alsa = new AlsaManager();
			// Test
            string device, channel;
            double step;
            Settings.load(out device, out channel, out step);
            volume_step = step;
            alsa.device = device;
            alsa.channel = channel;

			//var box = new Gtk.Box(HORIZONTAL, 10);
			//var screen = Wnck.Screen.get_default();
			//screen.force_update();
			//var workspaces = screen.get_workspaces().copy();
			//foreach (var workspace in workspaces) { 
			//	box.add(new WorkspaceButton(workspace));
			//	screen.force_update();
			//	var windows = screen.get_windows().copy();
			//	foreach (var window in windows) {
			//		var window_workspace = window.get_workspace();
			//		if (window_workspace == workspace) {
			//			box.add(new WindowButton(window, window_workspace));
			//		}
			//	}
			//}
			//add(box);
			
			//box.set_homogeneous(true);
			//box.show_all();

			//var box2 = new Gtk.Box(HORIZONTAL, 10);
			//for (var i=0; i<4; i++) {
			//	box2.add(new Gtk.Button.with_label(i.to_string()));
			//}
			//box2.show_all();
			//add(box2);

			//var box2 = new Gtk.Box(HORIZONTAL, 10);
			//box2.add(new Gtk.Label("adsfads"));
			//box2.add(new Gtk.Label("adsfads"));
			//box2.add(new Gtk.Label("adsfads"));			
			//this.add(box2);

			Gtk.Box container = new Gtk.Box(HORIZONTAL, 10);

			var screen = Wnck.Screen.get_default();
			screen.force_update();
			var workspaces = screen.get_workspaces().copy();
			foreach (var workspace in workspaces) {
				Gtk.Box box = new Gtk.Box(HORIZONTAL, 0);
				WorkspaceButton wspb = new WorkspaceButton(workspace);
				box.add(wspb);

				var windows = screen.get_windows().copy();
				foreach (var window in windows) {
					var window_workspace = window.get_workspace();
					if (window_workspace == workspace) {
						box.add(new WindowButton(window, window_workspace));
					}
				}
				
				box.set_hexpand(true);
				container.add(box);				
			}
			
			this.add(container);
			this.show_all();
			this.set_expand(true);

            menu_show_configure();
            configure_plugin.connect(() => {
                var dialog = new SettingsDialog(this);
                dialog.show_all();
            });
        }
    }
}

[ModuleInit]
public Type xfce_panel_module_init(TypeModule module) {
    return typeof (AlsaPlugin.Plugin);
}
