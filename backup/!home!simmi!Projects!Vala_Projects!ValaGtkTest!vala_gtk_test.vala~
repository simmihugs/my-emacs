public class MyButton : Gtk.Button {
	Wnck.Window wnck_window;

	public Wnck.Window get_wnck_window() { return this.wnck_window; }
	public MyButton (Wnck.Window wnck_window) {
		this.wnck_window = wnck_window;

		var wnck_window_name = wnck_window.get_class_group_name ();
		var wnck_window_icon = wnck_window.get_icon ();
		Gdk.Pixbuf other_icon;
		try {			
			if ("Alacritty" == wnck_window_name) {
				other_icon = new Gdk.Pixbuf.from_file("Alacritty.png");
				wnck_window_icon = other_icon;
			}
		} catch (GLib.Error ge) {
			//
		}
		
		var window_icon_scaled = wnck_window_icon.scale_simple (24, 24, HYPER);
		var image = new Gtk.Image.from_pixbuf (window_icon_scaled);
			
		this.set_image(image);
		this.set_image_position(BOTTOM);
	}
}



public class Hurray {
	Gtk.Window window;
	Gee.ArrayList<MyButton> list;
	Gtk.Box box2;

	public Hurray (Gtk.Window window) {
		this.window = window;
		this.box2 = new Gtk.Box (HORIZONTAL, 5);
		this.list = new Gee.ArrayList<MyButton> ();
		window.add (box2);
	}

	//public void style_button (Gtk.Button button) {
	//	Gtk.CssProvider css_provider = new Gtk.CssProvider ();
	//	css_provider.load_from_data ("""
	//								 .my_button_active {
	//									 border:none; border-radius:3px;
	//									 background:none;
	//									 background-color: #ff2200;
	//									 text-shadow:none;
	//									 box-shadow:none;
	//									 padding:3px;
	//								 }
	//								 
	//								 .my_button_active:hover {
	//									 background-color: magenta;
	//								 }
	//								 """);
	//	// } else {
	//	// 	css_provider.load_from_data ("""
	//	// 								 .my_button {
	//	// 									 border:none;
	//	// 									 border-radius:3px;
	//	// 									 background:none;
	//	// 									 background-color: #575c5e;
	//	// 									 text-shadow:none;
	//	// 									 box-shadow:none;
	//	// 									 padding:3px;
	//	// 								 }
	//	
	//	// 								 .my_button:hover {
	//	// 									 background-color: #81888c;
	//	// 								 }
	//	// 								 """);
	//	// }
	//
	//	Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default (),
	//											 css_provider,
	//											 Gtk.STYLE_PROVIDER_PRIORITY_USER);
	//	button.get_style_context().add_class ("my_button");
	//}
	
	public void init() {
		// Wnck.Screen screen = Wnck.Screen.get_default ();
		// screen.force_update ();
		// var wnck_windows = screen.get_windows().copy ();
		// foreach (var wnck_window in wnck_windows) {
		// 	var wnck_window_workspace = wnck_window.get_workspace ();
		// 	if (wnck_window_workspace != null) {
		// 		//button.set_css_name ("active-button");
		// 		var button = new MyButton (wnck_window);
		// 		//style_button (button);
		// 		list.add(button);
		// 	}
		// }
		Wnck.Screen screen = Wnck.Screen.get_default ();
		screen.force_update ();
		var wnck_windows = screen.get_windows().copy ();

		var wnck_workspaces = screen.get_workspaces().copy ();
		foreach (var wnck_workspace in wnck_workspaces) {
			var workspace_number = wnck_workspace.get_number ();
			var workspace_button = new Gtk.Button.with_label(workspace_number.to_string ());
			box2.add (workspace_button);
			foreach (var wnck_window in wnck_windows) {
				var wnck_window_workspace = wnck_window.get_workspace ();
				if (wnck_window_workspace != null) {
					var button = new MyButton (wnck_window);
					list.add(button);
				}
			}	
		}
	}

	public void draw () {
		box2.foreach ((element) => box2.remove (element));
	
		foreach (var button in list) {
			box2.add (button);
		}
	}

	public void window_opened(Wnck.Window wnck_window) {
		var wnck_window_workspace = wnck_window.get_workspace ();
		if (wnck_window_workspace != null) {
			var button = new MyButton (wnck_window);
			var name = wnck_window.get_class_group_name();
			stdout.printf("%s.\n", name);
			//list.add(button);
			box2.add (button);
			box2.show_all ();
		}
	}

	public void window_closed(Wnck.Window wnck_window) {
		var children = box2.get_children();
		foreach (var child in children) {
			MyButton button = (MyButton)child;
			if (button.get_wnck_window() == wnck_window) {
				box2.remove (child);		
			}
		}		
	}
	
}

public class WindowButton : Gtk.Button {
	public Wnck.Window wnck_window;

	public WindowButton (Wnck.Window wnck_window) {
		this.wnck_window = wnck_window;

		var wnck_window_name = wnck_window.get_class_group_name ();
		var wnck_window_icon = wnck_window.get_icon ();
		Gdk.Pixbuf other_icon;
		try {			
			if ("Alacritty" == wnck_window_name) {
				other_icon = new Gdk.Pixbuf.from_file("Alacritty.png");
				wnck_window_icon = other_icon;
			}
		} catch (GLib.Error ge) {
			//
		}
		
		var window_icon_scaled = wnck_window_icon.scale_simple (24, 24, HYPER);
		var image = new Gtk.Image.from_pixbuf (window_icon_scaled);
			
		this.set_image(image);
		this.set_image_position(BOTTOM);
		this.button_press_event.connect (on_button_press);
	}

	private bool on_button_press (Gdk.EventButton event) {
		if (event.type == Gdk.EventType.BUTTON_PRESS) {
			var wnck_workspace = wnck_window.get_workspace ();
			wnck_workspace.activate(event.get_time());
			wnck_window.activate(event.get_time());			
		}
		return false;
	}
}

public class WorkspaceButton : Gtk.Button {
	public Wnck.Workspace wnck_workspace;

	public WorkspaceButton (Wnck.Workspace wnck_workspace) {
		this.wnck_workspace = wnck_workspace;
		this.set_label(wnck_workspace.get_number().to_string());
		this.button_press_event.connect (on_button_press);
	}

	private bool on_button_press (Gdk.EventButton event) {
		if (event.type == Gdk.EventType.BUTTON_PRESS) {
			wnck_workspace.activate(event.get_time());
		}
		return false;
	}
}

public class Panel {
	Gtk.Box panel_box;
	Wnck.Screen panel_screen;
	Gdk.Monitor monitor;
	
	public Panel () {
		this.panel_box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
		this.panel_screen = Wnck.Screen.get_default ();
	}

	private bool is_on_monitor (Wnck.Window wnck_window) {
		Gdk.Rectangle monitor_rectangle = this.monitor.get_geometry ();
		int x, y, h, w;
		wnck_window.get_geometry (out x, out y, out w, out h);
		var window_rectangle = Gdk.Rectangle() { x=x, y=y, width=w, height=h };
		var out_rectangle = Gdk.Rectangle();
		if (monitor_rectangle.intersect(window_rectangle, out out_rectangle)) {
			return true;
		}
		return false;
	}

	public void init (Gtk.Box container, Gdk.Monitor monitor) {
		this.monitor = monitor;
		panel_screen.force_update ();
		var wnck_windows = panel_screen.get_windows().copy ();
		var wnck_workspaces = panel_screen.get_workspaces().copy ();
		
		foreach (var wnck_workspace in wnck_workspaces) {
			var workspace_button = new WorkspaceButton (wnck_workspace);
			var workspace_box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);

			workspace_box.add (workspace_button);
			foreach (var wnck_window in wnck_windows) {
				var wnck_window_workspace = wnck_window.get_workspace ();
				if (is_on_monitor(wnck_window) &&
					wnck_window_workspace != null &&
					wnck_window_workspace == wnck_workspace) {
					var button = new WindowButton (wnck_window);
					workspace_box.add(button);
				}
			}
			panel_box.add (workspace_box);
		}
		panel_box.set_homogeneous (true);
		container.add (panel_box);
	}
}

public class Panel2 {
	public Gtk.Box box;
	Wnck.Screen panel_screen;
	Wnck.Workspace wnck_workspace;
	Gdk.Monitor monitor;
	
	public Panel2 () {
		this.box = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 0);
		this.panel_screen = Wnck.Screen.get_default ();
	}

	private bool is_on_monitor (Wnck.Window wnck_window) {
		Gdk.Rectangle monitor_rectangle = this.monitor.get_geometry ();
		int x, y, h, w;
		wnck_window.get_geometry (out x, out y, out w, out h);
		var window_rectangle = Gdk.Rectangle() { x=x, y=y, width=w, height=h };
		var out_rectangle = Gdk.Rectangle();
		if (monitor_rectangle.intersect(window_rectangle, out out_rectangle)) {
			return true;
		}
		return false;
	}

	public void init (Gdk.Monitor monitor, Wnck.Workspace wnck_workspace) {
		this.monitor = monitor;
		this.wnck_workspace = wnck_workspace;
		panel_screen.force_update ();
		var wnck_windows = panel_screen.get_windows().copy ();		
		var workspace_button = new WorkspaceButton (wnck_workspace);

		box.add (workspace_button);
		foreach (var wnck_window in wnck_windows) {
			var wnck_window_workspace = wnck_window.get_workspace ();
			if (is_on_monitor(wnck_window) &&
				wnck_window_workspace != null &&
				wnck_window_workspace == wnck_workspace) {
				var button = new WindowButton (wnck_window);
				this.box.add (button);
			}
		}
		panel_screen.window_closed.connect(this.remove_window);
		//panel_screen.window_opened.connect(this.add_window);
	}

	private void remove_window (Wnck.Window wnck_window) {
		var children = this.box.get_children();
		if (children.length () > 1) {
			int i=0;
			foreach (var child in children) {
				if (i>0) {
					var button = (WindowButton)child;
					if (button.wnck_window == wnck_window) {
						this.box.remove (child);
					}
				}
				i++;
			}
		}
	}

	// private void add_window (Wnck.Window wnck_window) {
	// 	var wnck_window_workspace = wnck_window.get_workspace ();
	// 	if (wnck_window_workspace != null) {
	// 		var button = new WindowButton (wnck_window);
	// 		this.box.add (button);
	// 		this.box.show_all ();
	// 	}
	// }
}

public class Container : Gtk.Box {
	
	public Container () {
		this.set_spacing (10);
		this.set_orientation (Gtk.Orientation.VERTICAL);
		Gdk.Screen gdk_screen = Gdk.Screen.get_default ();
		Gdk.Display gdk_display = gdk_screen.get_display();
		Wnck.Screen screen = Wnck.Screen.get_default ();
		var n = gdk_display.get_n_monitors();
		for (var i=0; i<n; i++) {
			Gdk.Monitor gdk_monitor = gdk_display.get_monitor (i);
			Gtk.Box container = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 10);
			screen.force_update ();
			var wnck_workspaces = screen.get_workspaces().copy ();
			foreach (var wnck_workspace in wnck_workspaces) {
				var panel = new Panel2 ();
				panel.init (gdk_monitor, wnck_workspace);
				container.add (panel.box);
			}
			container.set_homogeneous (true);
			this.add (container);
		}
		screen.window_opened.connect(remove_workspace);
	}

	private void remove_workspace (Wnck.Window wnck_window) {
		var children = this.get_children ();
		foreach (var child in children) {
			var box = (Gtk.Box) child;
			var windows = box.get_children ();
			foreach (var window_ in windows) {
				var window = (Wnck.Window) window_;
				if (window == wnck_window) {
					this.remove (child);
				}
			}
		}
	}
	
}

public class Container2 : Gtk.Box {
	Wnck.Workspace wnck_workspace;

	public Container2 (Wnck.Workspace wnck_workspace) {
		this.wnck_workspace = wnck_workspace;
		Wnck.Screen screen = Wnck.Screen.get_default ();
		screen.force_update ();
		var wnck_windows = screen.get_windows().copy ();
		foreach (var wnck_window in wnck_windows) {
			var wnck_window_workspace = wnck_window.get_workspace ();
			if (wnck_window_workspace != null && wnck_window_workspace == wnck_workspace) {
				this.add (new WindowButton (wnck_window));
			}
		}
		screen.window_closed.connect(window_closed);
		screen.window_opened.connect(window_opened);	
	}

	private void window_closed (Wnck.Window wnck_window) {
		var children = this.get_children();
		foreach (var child in children) {
			var button = (WindowButton)child;
			if (button.wnck_window == wnck_window) {
				this.remove (child);		
			}
		}		
	}

	private void window_opened (Wnck.Window wnck_window) {
		var wnck_window_workspace = wnck_window.get_workspace ();
		if (wnck_window_workspace != null && wnck_workspace == wnck_window_workspace) {
			var button = new WindowButton (wnck_window);
			this.add (button);
			this.show_all ();
		}
	}
}

int main (string[] args) {
	Gtk.init(ref args);
	
	var window = new Gtk.Window ();
	window.title = "Hurray";
	window.border_width = 10;
	window.window_position = Gtk.WindowPosition.CENTER;
	window.set_default_size (350, 80);

	window.destroy.connect (Gtk.main_quit);

	var vertical_container = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 10);

	Wnck.Screen screen = Wnck.Screen.get_default ();
	screen.force_update ();
	var wnck_workspaces = screen.get_workspaces().copy ();
	foreach (var wnck_workspace in wnck_workspaces) {	
		var container = new Container2 (wnck_workspace);

		var workspace_container = new Gtk.Box (Gtk.Orientation.HORIZONTAL, 10);
		workspace_container.add (new WorkspaceButton (wnck_workspace));
		workspace_container.add (container);
		vertical_container.add (workspace_container);
	}

	vertical_container.set_homogeneous (true);
	window.add (vertical_container);

	
	// Gtk.Box container = new Gtk.Box (Gtk.Orientation.VERTICAL, 10);
	// Gdk.Screen gdk_screen = Gdk.Screen.get_default ();
	// Gdk.Display gdk_display = gdk_screen.get_display();
	// var n = gdk_display.get_n_monitors();
	// for (var i=0; i<n; i++) {
	// 	Gdk.Monitor gdk_monitor = gdk_display.get_monitor (i);
	// 	var panel = new Panel2 ();
	// 	panel.init (gdk_monitor, container);
	// 	panel.draw ();		
	// }

	// var vertical_container = new Container ();
	// window.add (vertical_container);


	
	//var hurray = new Hurray(window);
	//hurray.init();
	//hurray.draw();
	
	//Gtk.CssProvider css_provider = new Gtk.CssProvider ();
	//try {
	//css_provider.load_from_path ("style.css");
	//Gtk.StyleContext.add_provider_for_screen (Gdk.Screen.get_default (),
	//										  css_provider,
	//										  Gtk.STYLE_PROVIDER_PRIORITY_USER);
	//} catch (GLib.Error ge) {
	//	return 1;
	//}

	//Gtk.CssProvider css_provider = new Gtk.CssProvider ();
	//css_provider.load_from_resource("style.css");
	//Gtk.StyleContext.add_provider_for_screen (Gdk.Screen.get_default (),
	//										  css_provider,
	//										  Gtk.STYLE_PROVIDER_PRIORITY_USER);

	// Gtk.CssProvider css_provider = new Gtk.CssProvider ();
	// var button = new Gtk.Button.with_label ("'cuse me!");
	// //css_provider.load_from_data(".my_button { border: 0px; background: none; background-color: magenta; }");
	// css_provider.load_from_data (".my_button { border:none; border-radius:0; background:none; text-shadow:none; box-shadow:none; padding:0px; }");

	// Gtk.StyleContext.add_provider_for_screen(Gdk.Screen.get_default (),
	// 										 css_provider,
	// 										 Gtk.STYLE_PROVIDER_PRIORITY_USER);
	// button.get_style_context().add_class ("my_button");	
	// box2.add (button);

	//Wnck.Screen screen = Wnck.Screen.get_default ();
	//screen.force_update ();	
	//screen.window_opened.connect(hurray.window_opened);
	//screen.window_closed.connect(hurray.window_closed);	
	
	window.show_all ();

	Gtk.main ();
	return 0;	
}
